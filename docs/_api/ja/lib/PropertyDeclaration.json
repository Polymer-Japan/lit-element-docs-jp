{
    "PropertyDeclaration": {
        "comment": {
            "shortText": "プロパティアクセサのオプションを定義します。"
        },
        "properties": {
            "attribute": {
                "comment": {
                    "shortText": [
                        "プロパティが監視対象属性になる方法とその有無",
                        "値がfalseの場合、そのプロパティはObservAttributesに追加されません。",
                        "trueまたは存在しない場合は、小文字のプロパティ名が使用されます（たとえば、 `fooBar`は` foobar`になります）。文字列の場合、文字列値が遵守されます（例： `attribute： 'foo-bar'`）。"
                    ]
                }
            },
            "type": {
                "comment": {
                    "shortText": [
                        "プロパティの種類を示します。これは `converter`が属性とプロパティの間の変換方法を決定するためのヒントとしてのみ使われます。"
                    ]
                }
            },
            "converter": {
                "comment": {
                    "shortText": [
                        "属性とプロパティの間の変換方法を示します。",
                        "この値が関数の場合は、属性値をプロパティ値に変換するために使用されます。",
                        "それがオブジェクトなら、 `fromAttribute`と` toAttribute`のキーを持つことができます。",
                        "toAttribute関数が提供されておらず、かつreflectがtrueに設定されている場合、プロパティ値は属性に直接設定されます。",
                        "何も指定されていない場合はデフォルトの `converter`が使用されます。 `Boolean`、` String`、 `Number`、` Object`、そして `Array`をサポートします。",
                        "プロパティが変更され、コンバータを使用して属性を更新すると、属性が変更された結果としてそのプロパティが再度更新されることはありません。その逆も同様です。"
                    ]
                }
            },
            "reflect": {
                "comment": {
                    "shortText": [
                        "プロパティが属性を反映するかどうかを示します。",
                        "trueの場合、プロパティが設定されると、attribute属性オプションの規則に従って決定された属性名と、converterプロパティオプションの規則を使用して変換されたプロパティの値を使用して属性が設定されます。"
                    ]
                }
            },
            "noAccessor": {
                "comment": {
                    "shortText": [
                        "このプロパティに対してアクセサを作成するかどうかを示します。",
                        "デフォルトでは、設定時に更新を要求するアクセサがこのプロパティに対して生成されます。",
                        "このフラグがtrueの場合、アクセサは作成されず、プロパティが変更されたときに更新を要求するためにthis.requestUpdate（propertyName、oldValue）を呼び出すのはユーザの責任です。"
                    ]
                }
            }
        },
        "methods": {
            "hasChanged": {
                "comment": {
                    "shortText": [
                        "プロパティが設定時に変更されたと見なすべきかどうかを示す関数。この関数は `newValue`と` oldValue`を取り、更新が要求されるべきなら `true`を返すべきです。"
                    ]
                }
            }
        }
    }
}
